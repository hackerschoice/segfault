#! /bin/bash

# Executed on MASTER

WG_PORT_MIN=32768
WG_PORT_MAX=65535
WT_VER=1
COLOR="always"
ICON_ERROR=""
SF_RUN_DIR="/dev/shm/sf/run"
source /sf/bin/funcs.sh
source /sf/bin/funcs_net.sh
source /sf/bin/funcs_redis.sh
# backward compat bug fix. If this is past >=2025 then this line can be removed.
[[ -n ${SF_NET_ONION} ]] && { SF_NET_ONION="10.111.0.0/16"; SF_OVPN_HACK=1; }

[[ ! -d "/config/db" ]] && ERREXIT 255 "Not found: /config/db"
[[ ! -d "/config/db/wg" ]] && mkdir -p "/config/db/wg"

WG_EP_HOST=${WG_EP_IP}
[[ -z $WG_EP_HOST ]] && WG_EP_HOST="$SF_FQDN"

echo -en "Content-Type: text/plain\r\n\r\n"

logpipe() {
	[[ ! -e "${SF_RUN_DIR}/logpipe/logPipe.sock" ]] && return

	echo "$*" | nc -U unix-socket-client 
}

# BAIL <STDOUT-MSG> <STDERR-MSG> <INFO MSG>
# STDOUT goes to user.
# STDERR is logged.
BAIL()
{
	echo -e "${ICON_ERROR}${RR}ERROR${N}: $1"
	[[ -n $2 ]] && echo -e >&2 "[${CB}${LID:-$REMOTE_ADDR}${CN}] ${CR}$2${CN}$3"

	exit 255
}

Sanitize()
{
	REQUEST_BODY="${REQUEST_BODY//[^[:alnum:]_+=/&]}"
	REQUEST_URI="${REQUEST_URI//[^[:alnum:]_+=\/]}"
	[[ "${#REQUEST_BODY}" -gt 512 ]] && BAIL "To long" "To Long" ": REQUEST_BODY(${#REQUEST_BODY})=${REQUEST_BODY:0:32}..."
	[[ "${#REQUEST_URI}" -gt 512 ]] && BAIL "To long!" "ATTACK" ": REQUEST_URI(${#REQUEST_URI})=${REQUEST_URI:0:32}..."
	C_IP="${REMOTE_ADDR//[^0-9.]/}"
	[ -z "$C_IP" ] && BAIL "LG IP not known" "ERROR" ": ${REMOTE_ADDR} not a valid container IP"
}

lgns() { nsenter.u1000 --setuid 0 --setgid 0 "$@"; }

InitColors() {
	# COLOR is set (to 'always')
	Y=$CDY
	C=$CDC
	R=$CDR
	RR=$CR
	G=$CDG
	B=$CB
	M=$CDM
	YY=$CY
	W=$CW
	N=$CN
	F=$CF
	ICON_ERROR="ðŸ’¥ "
	ICON_WARN="ðŸ’¥ "
}

GetFormVars()
{
	local IFS
	local LC_ALL=C  #make [:print:] ASCII safe
	local arr

	IFS=\& read -r -a arr <<< "${REQUEST_BODY}"
	unset IFS

	local i
	local str
	local a
	local b
	while [[ $i -lt ${#arr[@]} ]]; do
		str="${arr[$i]}"
		((i++))
		key=${str%%=*}
		[[ ${#key} -eq 0 ]] && BAIL "Bad Request" "ERROR: " "Body contains bad variable: '$str'"
		key=${key,,}
		val=${str#*=}

		[[ ${key} == "config" ]] && {
			R_CONFIG="${val//[^[:alnum:]-_+\/.]}"
			[[ ${R_CONFIG:0:1} == "-" ]] && unset R_CONFIG
		}
		[[ ${key} == "pass"* ]] && R_PASS="${val//[^[:print:]]}"
		[[ ${key} == "user"* ]] && R_USER="${val//[^[:print:]]}"
		[[ ${key} == "keypass"* ]] && R_KEYPASS="${val//[^[:print:]]}"
		[[ ${key} == "route" ]] && [[ ${#R_ROUTE_ARR[@]} -lt 10 ]] && {
			local arr2
            IFS="/" read -r -a arr2 <<<"$val"
			a=${arr2[0]//[^0-9.]}
			[[ -z $a ]] && continue
			b=${arr2[1]//[^0-9]}
			R_ROUTE_ARR+=("${a}/${b:-32}")
		}

		[[ ${key} == "ipt" ]] && IS_IPT=1
		[[ ${key} == "nocolor" ]] && unset COLOR
		[[ ${key} == "nocreat" ]] && IS_NOCREAT=1
		[[ ${key} == "verbose" ]] && IS_VERBOSE=1
		[[ ${key} == "destruct" ]] && IS_DESTRUCT=1
		[[ ${key} == "port" ]] && { val=$((${val//[^0-9]})); [[ $val -ge 32768 && $val -le 65535 ]] && R_PORT="$val"; }
		[[ ${key} == "portsecret" ]] && R_PORTSECRET="${val//[^[:alnum:]]}"
		[[ ${key} == "exit_private" ]] && R_WT_PRIVATE="${val//[^[:alnum:]+\/]}="
		[[ ${key} == "exit_public" ]] && R_WT_PUBLIC="${val//[^[:alnum:]+\/]}="
		[[ ${key} == "privatekey" ]] && key="private"
		[[ ${key} == "private" ]] && R_WG_PRIVATE="${val//[^[:alnum:]+\/]}="
		[[ ${key} == "name" ]] && { val="${val//[^[:alnum:]]}"; R_WT_NAME="${val:0:13}"; }
		[[ ${key} == "token" ]] && { val="${val//[^a-zA-Z0-9@]}"; val="${val##*@}"; TOKEN_NAME="${val:0:64}"; }
		### wgOUT
		[[ ${key} == "psk" ]] && R_OUT_PSK="${val//[^[:alnum:]+\/]}="
		[[ ${key} == "public"    ]] && key="peer"  # Alias
		[[ ${key} == "publickey" ]] && key="peer"  # Alias
		[[ ${key} == "peer" ]] && R_OUT_PEER="${val//[^[:alnum:]+\/]}="
		# EndPoint must be IPv4 because not all UPLINK VPN support IPv6
		# EndPoint 1.2.3.4 or 1.2.3.4:51820 
		[[ ${key} == "ep" ]] && key="endpoint" # Alias
		[[ ${key} == "endpoint" ]] && R_OUT_ENDPOINT="${val//[^[:digit:].:]}"
		### if ADDRESS and if it contains ":" then assume IPv6"
		[[ ${key} == "address" ]] && [[ ${val} == *":"* ]] && key="ip6"      # Alias

		[[ ${key} == "address" ]] && key="ip4"      # Alias
		[[ ${key} == "ip"      ]] && key="ip4"      # Alias
		[[ ${key} == "ipv4"    ]] && key="ip4"     # Alias
		[[ ${key} == "ip4"     ]] && {
			val=${val%%\/*}  # Strip /32
			R_OUT_IP4="${val//[^0-9.]}"
		}
		[[ ${key} == "ipv6" ]] && key="ip6"    # Alias
		[[ ${key} == "address6" ]] && key="ip6"    # Alias
		[[ ${key} == "addres6" ]] && key="ip6"    # Alias
		[[ ${key} == "ip6"  ]] && {
			val=${val%%\/*}  # Strip /128
			R_OUT_IP6="${val//[^0-9a-f:]}"
		}
		[[ ${key} == "dev" ]] && {
			val="${val//[^[:alnum:]]}"
			WG_DEV="${val:0:13}"
			[[ ! "${WG_DEV}" =~ ^wg ]] && WG_DEV="wg${WG_DEV}"
		}
	done

	[[ -n $COLOR ]] && InitColors
	[[ -n "$R_CONFIG" ]] && [[ "${R_CONFIG:0:1}" != "/" ]] && BAIL "Path not absolute. Try ${C}curl ... -d config=\"\$(pwd)/${R_CONFIG}\"${N}"
}

# Load PID of WireGuard container
load_config()
{
	source /dev/shm/config.txt && source /dev/shm/config-lg.txt && return

	BAIL "Not ready. SF is still booting up..." "Failed to load: " "/dev/shm/config*.txt"
}

GenSecret()
{
	local len
	len=16

	str=$(head -c $((len*2)) </dev/urandom | base64 -w0)
	str=${str//[^[:alnum:]]}
	str=${str:0:$len}

	echo "$str"
}

net_print_example()
{
	local name
	name="${1}"

	echo -en "\
To connect ${G}${name}${N} use this command on the LINUX Exit Node:
${C}X='${WT_VER}-${WT_PRIVATE}'
X+='-${WG_PUBLIC}'
X+='-${WG_EP_HOST}:${WG_PORT}-${WG_IPS}'
U='https://github.com/hackerschoice/segfault/raw/refs/heads/main/contrib/sfwg'
DL=\"curl -fsSL \$U || wget --no-verbose -qO- \$U\"
X=\"\$X\" bash -c \"\$(sh -c \"\$DL\")\"${N}
or this command on the WINDOWS Exit Node:
${CY}${F}\$env:X='${WT_VER}-${WT_PRIVATE}'
\$env:X+='-${WG_PUBLIC}'
\$env:X+='-${WG_EP_HOST}:${WG_PORT}-${WG_IPS}'
irm https://thc.org/sfwg.ps1 | iex${N}
"
}


net_print_commands()
{
	local name
	name=$1
	echo -en "\
---
Use ${C}curl sf/net/down -d name=${name}${N} to disconnect.
Use ${C}curl sf/net/del  -d name=${name}${N} to delete the keys.
Use ${Y}curl sf/net/show${N} to check when the Exit Node ${G}${name}${N} has connected.
"
}


cmd_net_list()
{
	local fn
	local str
	local name
	local upstr
	local ex_wg_public
	local ex_wt_private
	local ex_wt_name
	local privstr
	local active_pubkey

	load_port
	echo -en "\
Port      : ${Y}$WG_PORT${N}
Portsecret: ${Y}$PORTSECRET${N}
"
	str=$(lgns -t "${LG_PID}" -n wg show all public-key)
	active_pubkey=${str##*$'\t'}
	# List all configured names
	echo -e "\

Name (${G}active${N})  |           | Private                                      | Public  
---------------+-----------+----------------------------------------------+---------------------------------------------"

	for fn in "${LID_WGDIR}/wg-"*; do
		[[ ! -f "$fn" ]] && break
		str=$(basename "$fn")
		name="${str#*-}"
		[[ $fn != "${LID_WGDIR}/wg-${name}" ]] && continue # BAD
		load_wg "$name"
		str="${name}                                      "
		unset upstr
		[[ "$active_pubkey" == "$WG_PUBLIC" ]] && {
			upstr="${G}"
			ex_wg_public="$WG_PUBLIC"
			ex_wt_private="$WT_PRIVATE"
			ex_wt_name="$name"
		}
		privstr="${WT_PRIVATE:-                                                                            }"
		echo -e "${upstr}${str:0:14}${N} | Segfault  | ${F}${WG_PRIVATE:0:10}##################################${N} | ${WG_PUBLIC}\n               | Exit Node | ${privstr:0:44} | ${F}$WT_PUBLIC${N}"
	done

	echo ""
	[[ -z $WT_PUBLIC ]] && {
		echo -e "${Y}WARNING${N}: No Exit Nodes configured. Use ${C}curl sf/net/up${N} first."
		exit
	}

	[[ -z $ex_wg_public ]] && {
		echo -e "${Y}WARNING${N}: No interface is up. Use ${C}curl sf/net/up -d name=<NAME>${N} first."
		exit
	}

	[[ -n $ex_wg_public ]] && {
		WG_PUBLIC="$ex_wg_public"
		WT_PRIVATE="$ex_wt_private"
		net_print_example "$ex_wt_name"
	}
	exit
}

net_init_print_info()
{
	echo -e "\
Port      : ${Y}$WG_PORT${N}
Portsecret: ${Y}$PORTSECRET${N}
Private   : ${Y}$WG_PRIVATE${N}
Name      : ${Y}$WT_NAME${N}
"
}


write_portfile()
{
	echo -n "\
WG_PORT=\"${WG_PORT}\"
ASSIGNED_LID=\"${LID}\"
PORTSECRET=\"${PORTSECRET}\"
" >"${LID_WGDIR}/port" || BAIL "Failed to store WireGuard Port."

	echo "WG_PORT=${WG_PORT}" >"/config/db/wg/sec2port-${PORTSECRET}"
	# Link to LID:
	ln -sf "../user/lg-${LID}/wg/port" "/config/db/wg/port-${WG_PORT}"
}

# [WT_NAME]
write_wgfile()
{
	local name
	name="$1"

	echo -n "\
WG_PRIVATE=\"${WG_PRIVATE}\"
WG_PUBLIC=\"${WG_PUBLIC}\"
WT_PRIVATE=\"${WT_PRIVATE}\"
WT_PUBLIC=\"${WT_PUBLIC}\"
WG_PORT=\"${WG_PORT}\"
" >"${LID_WGDIR}/wg-${name}" || BAIL "Failed to store WG information."

	ln -sf "../user/lg-${LID}/wg/wg-${name}" "/config/db/wg/wg-${name}"
}

# Assign port to _this_ LID
# [portsecret]
cmd_net_init_move()
{
	local psec
	psec="$1"

	source "/config/db/wg/sec2port-${psec}" 2>/dev/null || BAIL "Portsecret ${psec} is not known."
	[[ "${ASSIGNED_LID}" == "$LID" ]] && return # Already assigned to this LID
	ln -sf "../user/lg-${LID}/wg/port" "/config/db/wg/port-${WG_PORT}"
	PORTSECRET="$1"
	write_portfile
}

# Create a new WT_NAME
# - Find a free one
mk_wt_name()
{
	local i
	local dict
	local str
	local idx

	# FIXME: remove old compatibility if /dict.txt does not exists => ERREXIT instead.
	[[ ! -f /dict.txt ]] && {
		str="${WT_PUBLIC//[^[:alnum:]]}"
		echo "${str:0:4}"
		return
	}

	readarray -t dict <"/dict.txt"
	i=0
	while [[ $i -lt 5 ]]; do
		((i++))
		idx=$((RANDOM % ${#dict[@]}))
		str=${dict[$idx]}
		str=${str:0:13}

		[[ -e "/config/db/wg/wg-${str}" ]] && continue
		echo "$str"
		return
	done

	BAIL "Could not find free name. Try -d name=<NAME>." "RPC: could not find free name."
}

# sf/net/init
# Assign/Retrieve WireGuard port for this LID
net_init()
{
	local n
	local err
	local arr

	arr=($(echo "${LID_WGDIR}/wg-"*))
	[[ ${#arr[@]} -gt 16 ]] && BAIL "To many Peers. You must delete some first.
Use ${C}curl sf/net/list${N} to see them all.
Use ${C}curl sf/net/del -d name=<NAME>${N} to delete <NAME>.
Use ${C}curl sf/net/del -d name=all${N} to delete them all." "${RR}PEERS-MAX${N} " "Limit: ${#arr[@]}"

	[[ -n ${R_PORTSECRET} ]] && cmd_net_init_move "${R_PORTSECRET}"

	if source "${LID_WGDIR}/port" 2>/dev/null; then
		# HERE: Port already assigned to this LID,
		[[ -n ${R_PORT} ]] && [[ $R_PORT -ne $WG_PORT ]] && echo -e "${Y}WARNING:${N} Ignoring request for Port ${R_PORT}. Port already set to ${WG_PORT}."
	else
		# HERE: No Port yet assigned to this LID.

		# Allow user to pick a port.
		if [[ -n ${R_PORT} ]]; then
			[[ -e "/config/db/wg/port-${R_PORT}" ]] && BAIL "\
Port ${R_PORT} is already in use. You can assign it to this server like so:\
    ${C}curl sf/net/init -d portsecret=<SECRET>${N}"
    		WG_PORT=${R_PORT}
    	else
			# Assign random port 32768...65535
			n=0
			while :; do
				WG_PORT="$((WG_PORT_MIN + RANDOM % (WG_PORT_MAX - WG_PORT_MIN + 1)))"
				[[ ! -e "/config/db/wg/port-${WG_PORT}" ]] && break
				((n++))
				[[ $n -gt 5 ]] && BAIL "Failed to find free WireGuard Port."
			done
		fi
	fi

	[[ -z $PORTSECRET ]] && {
		PORTSECRET="${WG_PORT}_$(GenSecret)"
		write_portfile
	}

	[[ -e "/config/db/wg/wg-${R_WT_NAME}" ]] && BAIL "'$R_WT_NAME' already exists. Delete it first with ${C}curl sf/net/del -d name=${R_WT_NAME}${N}"

	# We do not need the peer's private key but it is more convenient
	# to the user to show him one complete ./wiretap command line.
	if [[ -z $R_WT_PRIVATE ]]; then
		if [[ -z $R_WT_PUBLIC ]]; then
			# No PRIVATE and No PUBLIC. User wants us
			# to generate PUBLIC key (and for this we generate private)
			WT_PRIVATE=$(wg genkey)
		fi
		# WT_PRIVATE can be empty (The Exit Node's private does not need to be known)
	else
		WT_PRIVATE="$R_WT_PRIVATE"
	fi

	[[ -n $R_WT_PUBLIC ]] && WT_PUBLIC="$R_WT_PUBLIC" || WT_PUBLIC=$(echo "$WT_PRIVATE" | wg pubkey)

	WT_NAME=${R_WT_NAME:-$(mk_wt_name)}

	# Generate server's private unless it's provided by user
	[[ -n $R_WG_PRIVATE ]] && WG_PRIVATE="$R_WG_PRIVATE" || WG_PRIVATE=$(wg genkey)
	WG_PUBLIC=$(echo "$WG_PRIVATE" | wg pubkey)
	write_wgfile "${WT_NAME}"
}

cmd_net_init()
{
	net_init
	net_init_print_info
	echo -e "Use ${C}curl sf/net/up -d name=${WT_NAME}${N} to connect an Exit Node."

	exit
}

load_port()
{
	source "${LID_WGDIR}/port" 2>/dev/null || BAIL "${Y}WARNING${N}: No Exit Node found. Use ${C}curl sf/net/up${N} first."
}

load_wg()
{
	source "${LID_WGDIR}/wg-${1}" || BAIL "Not found." "ERROR: " "Not found: wg/wg-${1}"
}


xrm()
{
	local fn
	local err
	err=0

	for fn in "$@"; do
		[[ ! -f "$fn" ]] && { err=255; continue; }
		rm -f "$fn"
	done

	return $err
}

set_normal_route()
{
	# Delete static routes
	lgns -t "${LG_PID}" -n ip route del "${SF_TOR_IP}" via "${SF_NET_LG_ROUTER_IP}" 2>/dev/null
	lgns -t "${LG_PID}" -n ip route del "${SF_NET_ONION}" via "${SF_NET_LG_ROUTER_IP}" 2>/dev/null
	lgns -t "${LG_PID}" -n ip route del "${SF_DNS}" via "${SF_NET_LG_ROUTER_IP}" 2>/dev/null
	[[ -n $SF_MULLVAD_ROUTE ]] && lgns -t "${LG_PID}" -n ip route del "${SF_MULLVAD_ROUTE}" via "${SF_NET_LG_ROUTER_IP}" 2>/dev/null

	# Should not exist anyway:
	lgns -t "${LG_PID}" -n ip route del default 2>/dev/null

	# EndPoint
	epip=$(lgns -t "${LG_PID}" -n ip route show | grep -F "via ${SF_NET_LG_ROUTER_IP} dev" | grep -v ^default | tail -n1)
	epip="${epip%% *}"
	epip=${epip//[^0-9.]}
	[[ -n $epip ]] && lgns -t "${LG_PID}" -n ip route del "${epip}" via "${SF_NET_LG_ROUTER_IP}" 2>/dev/null

	# Restore default routing
	lgns -t "${LG_PID}" -n ip route add default via "${SF_NET_LG_ROUTER_IP}" || { echo "Oops. Could not set default route."; return; }
	# Zero the file
	:>"${LID_PROMPT_FN}"
}

mk_normal_route() {
	set_normal_route
	echo -e "${Y}WARNING${N}: All traffic exits via the DEFAULT ROUTE now."
}

net_down()
{
	local name
	name="$1"

	# Shut down WG interface
	if [[ -z $name || $name == "all" ]]; then
		### Need name for help below
		[[ -e "${LID_WGNAME_FN}" ]] && name=$(<"${LID_WGNAME_FN}")
		lgns -t "${LG_PID}" -n ip link delete group 31337 2>/dev/null || return
	else
		# Return early if device did not exist.
		lgns -t "${LG_PID}" -n ip link delete "wg${name}" 2>/dev/null || return
	fi
	echo -e "${G}SUCCESS${N}"
	echo -e "Use ${C}curl sf/net/up -d name=${name:-<NAME>}${N} to connect again."

	mk_normal_route

	# Delete WG NAME
	rm -f "${LID_WGNAME_FN:?}" "${USER_DB_WGNAME_UP_FN:?}"
}

cmd_net_del()
{
	load_port
	local fn

	[[ -z $R_WT_NAME ]] && BAIL "Use ${C}-d name=<NAME|all>${N}"

	net_down "$R_WT_NAME"
	if [[ "$R_WT_NAME" == "all" ]]; then
		# Delete all private keys
		for fn in "${LID_WGDIR}/wg-"*; do
			[[ ! -f "$fn" ]] && break
			str=$(basename "$fn")
			name="${str#*-}"
			[[ $fn != "${LID_WGDIR}/wg-${name}" ]] && continue # BAD
			# Delete all links
			xrm "/config/db/wg/wg-${name}" "${LID_WGDIR}/wg-${name}"
		done
		echo -en "All private keys deleted."
		exit
	fi

	[[ ! -f "${LID_WGDIR}/wg-${R_WT_NAME}" ]] && BAIL "${RR}Not found${N}: ${R_WT_NAME}"
	xrm "/config/db/wg/wg-${R_WT_NAME}" "${LID_WGDIR}/wg-${R_WT_NAME}"

	echo -en "\
${G}Private key deleted${N} ($R_WT_NAME).
"
	exit
}

cmd_net()
{
	load_port
	cmd_net_print_info
	exit
}

wg_show()
{
	if [[ -z $COLOR ]]; then
		lgns -t "${LG_PID}" -n wg show "${WG_DEV}"
	else
		# Use 'script' to force color output
		script -q -c "nsenter.u1000 --setuid 0 --setgid 0 -t \"${LG_PID}\" -n wg show \"${WG_DEV}\"" /dev/null </dev/null
	fi
}

cmd_net_show()
{
	local str
	local name
	local is_not_connected
	local now
	local IFS

	IFS=""
	str=$(wg_show)
	{ [[ -z $str ]] || [[ $str == *"No such device"* ]]; } && {
		echo -e "\
${Y}WARNING${N}: No Exit Node enabled.
Use ${C}curl sf/net/list${N} to list all Exit Nodes.
Use ${C}curl sf/net/up -d name=<NAME>${N} to enable an Exit Node.
Use ${C}curl sf/net/up${N} to enable a new Exit Node."

		exit
	}

	echo "$str"
	if [[ "$str" == *"latest handshake"* ]]; then
		str=$(lgns -t "${LG_PID}" -n wg show "${WG_DEV}" latest-handshakes)
		str=${str##*$'\t'}
		now=$(date +%s)
		[[ $((now - str)) -gt 180 ]] && is_not_connected=1
	else
		is_not_connected=1
	fi
	[[ -e "${LID_WGNAME_FN}" ]] && {
		name=$(<"${LID_WGNAME_FN}")
		str="${F}[${G}connected${N}${F}]${N}"
		[[ -n $is_not_connected ]] && str="${F}[${N}${RR}EXIT Node is not connected${N}${F}]${N}"
		echo -e "\n${YY}Name${N}: ${Y}${name:-UNKNOWN}${N} ${str}"
		### gvisor's DNAT used by WT is BROKEN
		### https://github.com/sandialabs/wiretap/issues/18#issuecomment-1583106554
		### Work-around it to iterate over as many src ports as possible.
		[[ -z $is_not_connected ]] && echo -e "\
${W}  peer${N}:  ${WG_IP_PRE}1, ${WG_IP6_PRE}1
${W}  spoof${N}: ${WG_IP_PRE}3, ${WG_IP6_PRE}3 ${F}[masscan -e '${WG_DEV}' --adapter-ip ${WG_IP_PRE}3 --banners ...]${N}"
	}
	[[ -n $is_not_connected ]] && {
		[[ -n $name ]] && {
			load_wg "$name"
			net_print_example "$name"
		}
	}
	echo -e "\nUse ${C}curl sf/net/down${N} to stop WireGuard."
	exit
}

cmd_net_down()
{
	local dev

	net_down "${R_WT_NAME}"
	exit
}

cmd_net_help()
{
	echo -en "\
Create Exit Node : ${C}curl sf/net/init [-d name=<NAME>] [-d private=<PrivateKey>]
                                    [-d exit_public=<PublicKey>]
                                    [-d exit_private=<PrivateKey>]
                                    [-d route=<CIDR>]${N}
Delete Exit Node : ${C}curl sf/net/del  [-d name=<NAME|all>]${N}
List Exit Nodes  : ${C}curl sf/net/list${N}
Show connections : ${C}curl sf/net/show${N}
Move port to a different Root Server:
    ${C}curl sf/net/init -d portsecret=<portsecret>${N}
Connect Exit Node:
    ${C}curl sf/net/up   [-d name=<NAME>]${N}
Disconnect Exit Node:
    ${C}curl sf/net/down [-d name=<NAME>]${N}
"

	exit
}

CheckGoodKey()
{
	local key
	local opt

	key=$1
	opt=$2

	[[ -z $key ]] && return
	[[ ${#key} -eq 44 ]] && return
	BAIL "Bad Key for ${opt}="
}

# Load LG specific configuration (by source IP)
load_lg() {
	local arr;
	# Retrieve (LID CID PID)
	arr=($(redr GET "ip:${REMOTE_ADDR}")) || BAIL "Bad Value" "Bad Value: " "ret=$?, ${#arr[@]}"
	[[ ${#arr[@]} -ne 3 ]] && BAIL "Value != 3" "Value != 3: " "${#arr[@]}"
	LID="${arr[0]}"
	CID="${arr[1]}"
	LG_PID="${arr[2]}"
	[[ -z "$LID" ]] && BAIL "LID is empty."
}

wg_net_init()
{
	local IFS

	load_lg
	LID_WGDIR="/config/db/user/lg-${LID}/wg"
	[[ ! -d "${LID_WGDIR}" ]] && mkdir "${LID_WGDIR}"
	LID_PROMPT_FN="/dev/shm/sf/self-for-guest/lg-${LID}/prompt"
	# The WGNAME needs to be stored in user's self-config so that it is avaialble to the
	# user (which must be on /dev/shm) but also perm. in db/user/lg-* to restart WG
	# after a SSC restart.
	LID_WGNAME_FN="/dev/shm/sf/self-for-guest/lg-${LID}/wgname"
	USER_DB_WGNAME_UP_FN="/config/db/user/lg-${LID}/wg/name_up"
	# USER_DB_WGCLIENT_FN="/config/db/user/lg-${LID}/wg/client"

	# Split into arguments
	IFS=/ read -r -a ARGS <<< "${REQUEST_URI:1}"  # Ignore first '/'. Split into arguements.
}

ERR_wg_help_exit()
{
	echo -e "${RR}ERROR${N}: $1"

	cmd_wg_help
	exit
}

cmd_port() {
	local ipport

	load_lg
	source "/dev/shm/sf/run/users/lg-${LID}/limits.txt"
	[[ -z $SF_RPORT ]] && BAIL "${M}You need a TOKEN to use this feature. Please read https://thc.org/sf/token.
Alternatively, set up your own reverse port like so: https://tinyurl.com/thctips#ports${N}"

	red RPUSH portd:cmd "remport ${LID}" >/dev/null
	sleep 1  # Stop DoS attack: flood-requesting reverse ports
	ipport=$(echo -e "DEL portd:response-${LID}\"\n\
RPUSH portd:blcmd \"getport ${LID}\"\n\
BLPOP portd:response-${LID} 5" | redr) || return
	# DEBUGF "ipport='$ipport'"
	ipport="${ipport##*$'\n'}"
	[[ ! "${ipport##*:}" -gt 0 ]] && BAIL "Ports not available. Please report this to a SysCop." "BAD sf/port (ipport='$ipport')"

	# The PortD add's a /sf/run/self/reverse_forward.
	echo -e "\
${M}ðŸŒŽ Tip${N}: Type ${C}cat /config/self/reverse_*${N} for details.
${M}ðŸ¤­ Tip${N}: Type ${C}rshell${N} to start listening.
${M}ðŸ›œ Tip${N}: Type ${C}curl sf/port${N} to assign a new port.
${G}ðŸ‘¾ Your reverse Port is ${Y}${ipport%%:*} ${ipport##*:}${N} ${F}[${ipport%%:*}:${ipport##*:}]${N}"

	# portd.sh automaticaly adds this to /config/self/reverse_*
	exit
}

cmd_ipt() {
	load_lg
	load_config
	echo -e "${CDM}====NAT ${CF}(YOUR server)${CN}"
	lgns -t "${LG_PID:?}" -n iptables -t nat -vnL OUTPUT --line-numbers | grep -Ev '(DOCKER)'
	lgns -t "${LG_PID:?}" -n iptables -t nat -vnL "OUT-PROXY-${LID}" --line-numbers 2>/dev/null
	echo -e "${CDM}====FORWARD ${CF}(SF-ROUTER)${CN}"
	nsenter -t "${SF_ROUTER_PID}" -m -n sh -c "iptables -L \"\$(cat \"/dev/shm/ipt-syn-chain-${C_IP}.saved\")\" -vn"
	nsenter -t "${SF_ROUTER_PID:?}" -n iptables -vnL "FW-${LID:?}"
}

cmd_proxy() {
	local IFS
	local pid

	load_lg

	IFS=/ read -r -a ARGS <<< "${REQUEST_URI:1}"  # Ignore first '/'. Split into arguements.
	pid="${ARGS[1]}"
	pid="${pid//[^0-9]}"
	pid="${pid:0:12}"

	[[ -z "$pid" ]] && BAIL "${M}Type ${C}curl sf/proxy/\$\$${M} to proxy your shell to :1040"

	[[ $pid -eq 0 ]] && {
			nsenter.u1000 -t "${LG_PID}" -n iptables -t nat -D "OUTPUT" -j "OUT-PROXY-${LID}" 2>/dev/null && {
				nsenter.u1000 -t "${LG_PID}" -n iptables -t nat -F "OUT-PROXY-${LID}"
				nsenter.u1000 -t "${LG_PID}" -n iptables -t nat -X "OUT-PROXY-${LID}"
			}

			# Move all processes back to normal cgroup
			# cgroup needs an EOF after each write => Use a while loop
			nsenter.u1000 -t "${LG_PID:?}" -p sh -c "cat '/sf-cgroup/docker-${CID}.scope/proxy1040/cgroup.procs' | while read -r p; do echo \"\$p\" >'/sf-cgroup/docker-${CID}.scope/cgroup.procs'; done"
			return
	}

	nsenter.u1000 -t "${LG_PID}" -n iptables -t nat -N "OUT-PROXY-${LID}" && {
		# Did not exit. 
		nsenter.u1000 -t "${LG_PID}" -n iptables -t nat -N "OUT-PROXY-${LID}"
		nsenter.u1000 -t "${LG_PID}" -n iptables -t nat -A "OUTPUT" -j "OUT-PROXY-${LID}"
		[[ -n "$SF_MULLVAD_ROUTE" ]] && nsenter.u1000 -t "${LG_PID}" -n iptables -t nat -A OUTPUT -p tcp -d "$SF_MULLVAD_ROUTE" -j RETURN
		nsenter.u1000 -t "${LG_PID}" -n iptables -t nat -A "OUT-PROXY-${LID}" -m addrtype --dst-type LOCAL -j RETURN
		nsenter.u1000 -t "${LG_PID}" -n iptables -t nat -A "OUT-PROXY-${LID}" -p tcp -d "${SF_RPC_IP:?}" -j RETURN
		nsenter.u1000 -t "${LG_PID}" -n iptables -t nat -A "OUT-PROXY-${LID}" -p tcp -d "${SF_TOR_IP:?}" -j RETURN
		# echo "DNS=$SF_DNS"
		nsenter.u1000 -t "${LG_PID}" -n iptables -t nat -A "OUT-PROXY-${LID}" -p udp -d "${SF_DNS:?}" -j RETURN
	}
	for dst in "${R_ROUTE_ARR[@]:-0.0.0.0/0}"; do
		# Set redirect rules
		nsenter.u1000 -t "${LG_PID}" -n -C iptables -t nat -A "OUT-PROXY-${LID}" -m cgroup --path /proxy1040 -p tcp -d "$dst" -j REDIRECT --to-port 1040
		nsenter.u1000 -t "${LG_PID}" -n -C iptables -t nat -A "OUT-PROXY-${LID}" -m cgroup --path /proxy1040 -p udp -d "$dst" -j REDIRECT --to-port 1040
	done

	# echo "$pid" | nsenter.u1000 -t "${LG_PID:?}" -p sh -c "cat >'/sf-cgroup/docker-${CID}.scope/proxy1040/cgroup.procs'" || BAIL "invalid PID"
	# Amazing, linux moves the FD into the target process space so >> works!
	nsenter.u1000 -t "${LG_PID:?}" -p echo "$pid" >>"/sf-cgroup/docker-${CID}.scope/proxy1040/cgroup.procs" || BAIL "invalid PID"

	echo -en "\
${M}ðŸŒŽ Tip${N}: Type ${C}cat /sys/fs/cgroup/proxy1040/cgroup.procs${N} for details.
${G}ðŸ‘¾ TCP+UDP traffic of PID ${Y}${pid}${G} ${F}(and all child processes)${G} is now redirected to ${Y}localhost:1040${N}"

	exit
}

cmd_token() {
	local token_fn="/config/db/token/token-${TOKEN_NAME,,}.conf"
	load_lg
	source "/dev/shm/sf/run/users/lg-${LID}/limits.txt"

	[[ -n $SF_TOKEN_IMMUTABLE ]] && BAIL "${M}Please contact a SysCop to enable this feature for you.${N}"
	[[ ! -f "${token_fn}" ]] && { sleep 1; BAIL "${M}Token '${R}${TOKEN_NAME}${M}' does not exist.${N}"; }

	echo "${TOKEN_NAME}" >"/config/db/user/lg-${LID}/token"
	logpipe "Type:Token|TOKEN:${TOKEN_NAME,,}|LID:${LID}|HOSTNAME:${SF_HOSTNAME}|IPHASH:${YOUR_IP_HASH}|C_ISO:${YOUR_COUNTRY_ISO^^}|CONTINENT=${YOUR_CONTINENT_CODE}|"

	echo -en "${G}ðŸ¦‹ Token set. ${N}Type ${C}halt${N} and log back in."

	exit
}

cmd_destruct() {
	rm -f "/dev/shm/sf/run/users/lg-${LID}/limits.txt" "/config/db/user/lg-${LID}/token"
	[[ -d "/dev/shm/sf/run/users/lg-${LID}/wg" ]] && rm -rf "/dev/shm/sf/run/users/lg-${LID}/wg"
}

# CLIENT
cmd_wg_up()
{
	local epip
	local args
	local err

	[[ ${R_OUT_ENDPOINT} != *:* ]] && R_OUT_ENDPOINT+=":51820"
	epip="${R_OUT_ENDPOINT%%:*}"
	[[ -z "$epip" ]] && unset R_OUT_ENDPOINT
	[[ -z $R_OUT_ENDPOINT ]] && ERR_wg_help_exit "No EndPoint found. Please use ${C}-d endpoint=1.2.3.4:51820${N}"

	[[ -n ${R_OUT_PSK} ]] && [[ ${#R_OUT_PSK} -ne 44 ]] && ERR_wg_help_exit "Bad PSK. Please use ${C}-d psk=1234567890abcdef1234567890abcdef1234567890a=${N}"
	[[ ${#R_OUT_PEER} -ne 44 ]] && ERR_wg_help_exit "Bad public key. Please use ${C}-d PublicKey=1234567890abcdef1234567890abcdef1234567890a=${N}"
	[[ ${#R_WG_PRIVATE} -ne 44 ]] && ERR_wg_help_exit "Bad private key. Please use ${C}-d PrivateKey=1234567890abcdef1234567890abcdef1234567890a=${N}"

	[[ -z $R_OUT_IP4 ]] && [[ -z $R_OUT_IP6 ]] && ERR_wg_help_exit "Bad IP (${R_OUT_IP4:-???},${R_OUT_IP6:-???}) for this peer. Please use ${C}-d ip=1.2.3.4${N} and/or ${C}-d ip6=fd:16::1${N}"

	# Delete any EXIT or OUT 
	lgns -t "${LG_PID}" -n ip link delete group 31337 2>/dev/null

	err=$(lgns -t "${LG_PID}" -n ip link add "${WG_DEV}" type wireguard 2>&1) || BAIL "Failed: ip link add '${WG_DEV}' (${err:0:64})." "Failed ${WG_DEV}" ": $err"
	lgns -t "${LG_PID}" -n ip link set "${WG_DEV}" group 31337 || BAIL "ip link set FAILED."
	[[ -n $R_OUT_IP4 ]] && { lgns -t "${LG_PID}" -n ip address add dev "${WG_DEV}" "${R_OUT_IP4}" || BAIL "Failed to assign IPv4 address '${R_OUT_IP4}'."; }
	[[ -n $R_OUT_IP6 ]] && { lgns -t "${LG_PID}" -n ip -6 address add dev "${WG_DEV}" "${R_OUT_IP6}" || BAIL "Failed to assign IPv6 address '${R_OUT_IP6}'."; }

	args=()
	[[ -n $R_OUT_PSK ]] && {
		args+=("preshared-key" "/dev/shm/psk.$$")
		echo "$R_OUT_PSK" >"/dev/shm/psk.$$"
	}
	echo "$R_WG_PRIVATE" >"/dev/shm/private.$$"
	err=$(lgns -t "${LG_PID}" -n wg set "$WG_DEV" private-key "/dev/shm/private.$$" peer "$R_OUT_PEER" "${args[@]}" endpoint "${R_OUT_ENDPOINT}" persistent-keepalive 25 allowed-ips 0.0.0.0/0,::/0 2>&1) || BAIL "Failed: wg set (${err:0:128})"
	rm -f "/dev/shm/private.$$" "/dev/shm/psk.$$"
	# WG IPv4: HOST_MTU - 60 (20 + 40)
    # WG IPv6: HOST_MTU - 80 (40 + 40)
	lgns -t "${LG_PID}" -n ip link set mtu $((SF_HOST_MTU - 80 - 80)) up dev "${WG_DEV}"

	# Route to WG endpoint:
	lgns -t "${LG_PID}" -n ip route add "${epip}" via "${SF_NET_LG_ROUTER_IP}" 2>/dev/null

	set_route
	echo "(%F{yellow}EXIT:%B${R_WT_NAME:-$epip}%b%F{%(#.blue.green)})" >"${LID_PROMPT_FN}"
	echo -e "${G}SUCCESS${N}"
	echo -en "\
---
Use ${C}curl sf/wg/down${N} to disconnect.
Use ${C}curl sf/wg/show${N} to check when WireGuard to ${G}${R_OUT_ENDPOINT}${N} has connected.
"

	### Save config
# 	echo -e "\
# IS_WG_CLIENT=1
# WG_DEV=\"${WG_DEV}\"" >"${USER_DB_WGCLIENT_FN}"
	exit
}

cmd_wg_help()
{
	echo -en "\
Use ${C}curl sf/wg/up -d endpoint=<Server's IP Address, e.g. 1.2.3.4:51820> \\ 
                  -d PublicKey=<Server's Public Key> \\
                  -d PrivateKey=<Client's Private Key> \\
                  -d Address=<Client's IPv4, e.g. 1.2.3.4> \\
                  -d Addres6=<Client's IPv6, e.g. fd:16::1> \\
                  -d psk=<Pre-Shared-Secret> \\ ${F}# optional${C}
                  -d name=<A cool Name>        ${F}# optional${C}${N}
Use ${C}curl sf/wg/down${N} to disconnect.
Use ${C}curl sf/wg/show${N} to check WireGuard connetion."
}

# CLIENT
cmd_wg_del()
{
	lgns -t "${LG_PID}" -n ip link delete group 31337 2>/dev/null
	# [[ -f "${USER_DB_WGCLIENT_FN}" ]] && rm -f "${USER_DB_WGCLIENT_FN}"
	echo -e "${G}SUCCESS${N}"
	mk_normal_route
	exit
}

cmd_wg_show()
{
	local str
	str=$(wg_show)
	{ [[ -z $str ]] || [[ $str == *"No such device"* ]]; } && {
		echo -e "${Y}WARNING${N}: No Exit Node configured."
		cmd_wg_help
		exit
	}
	echo "$str"
	exit
}

# shellcheck disable=2188 # unrecognized redirection (haha. shellsheck you suck)
0<&- # Close STDIN
Sanitize
GetFormVars

[[ "${FCGI_CMD}" == "dmesg" ]] && {
	# dmesg --color=always -f kern --level err,warn -e | tail -n100
	dmesg --color="${COLOR:-never}" -f kern --level err -e | tail -n20
	exit
}

[[ "${FCGI_CMD}" == "port" ]] && cmd_port
[[ "${FCGI_CMD}" == "proxy" ]] && cmd_proxy
[[ "${FCGI_CMD}" == "set" ]] && {
	[[ -n $TOKEN_NAME ]] && cmd_token
	[[ -n $IS_DESTRUCT ]] && cmd_destruct
	BAIL "${M}Setting not found.${N}"
}

[ "${FCGI_CMD}" = "get" ] && {
	[ -n "$IS_IPT" ] && cmd_ipt
	BAIL "${M}Setting not found.${N}"
}

[ "${FCGI_CMD}" = "ipt" ] && cmd_ipt

[[ -n $SF_DEBUG ]] && [[ "${FCGI_CMD}" == "env" ]] && { env; exit; }

wg_net_init

# /wg/up
# /wg/show
# /wg/del
[[ "${FCGI_CMD}" == "wg" ]] && {
	[[ -z $WG_DEV ]] && WG_DEV="wgOut"

	[[ ${ARGS[1]} == 'up'   ]] && cmd_wg_up
	[[ ${ARGS[1]} == 'del'  ]] && cmd_wg_del
	[[ ${ARGS[1]} == 'down' ]] && cmd_wg_del
	[[ ${ARGS[1]} == 'show' ]] && cmd_wg_show
	cmd_wg_help

	exit
}

[[ "${FCGI_CMD}" == "ovpn" ]] && {
	source "/sf/bin/funcs_ovpn.sh"
	[[ ${ARGS[1]} == 'up'   ]] && cmd_ovpn_up
	[[ ${ARGS[1]} == 'show'   ]] && cmd_ovpn_show
	[[ ${ARGS[1]} == 'del'  ]] && cmd_ovpn_del
	[[ ${ARGS[1]} == 'down' ]] && cmd_ovpn_del
	cmd_ovpn_help

	exit
}

# /net       -> Show port assignment
# /net/init  -> Assigned port to this LID or create new port.
# /net/up    -> Create WireGuard interface
# /net/show  -> Show WireGuard peers
# /net/down
# /net/del
# /net/list
[[ "${FCGI_CMD}" == "net" ]] && {
	CheckGoodKey "$R_WG_PRIVATE" "--private"
	CheckGoodKey "$R_WT_PRIVATE" "--exit_private"
	CheckGoodKey "$R_WT_PUBLIC"  "--exit_public"

	[[ -n $R_WT_PRIVATE ]] && [[ -n $R_WT_PUBLIC ]] && BAIL "Set either PRIVATE or PUBLIC but not both."

	# Sanitize 0.4.8rc1 bug where '172...' was '"172...' in .env
	WG_IPS="${WG_IPS//[^a-fx0-9\/,:.]}"
	[[ -z $WG_IPS ]] && WG_IPS="172.16.0.x/24,fd:16::x/104"

	WG_IP_PRE="${WG_IPS%%x*}"      # 172.16.0.
	WG_IP="${WG_IP_PRE}2/32"       # 172.16.0.2/32

	WG_IP6_PRE="${WG_IPS##*,}"
	WG_IP6_PRE="${WG_IP6_PRE%%x*}" # fd:16::
	WG_IP6="${WG_IP6_PRE}2/128"    # fd:16::2/128

	# dev="wg${WT_NAME}"
	# Call Interface wgExit or user supplied. Previously we named wg${WT_NAME}.
	[[ -z $WG_DEV ]] && WG_DEV="wgExit"

	# Show current port configuration
	[[ ${ARGS[0]} == 'net' && ${ARGS[1]} == 'show' ]] && cmd_net_show

	# Initialize or set port
	[[ ${ARGS[1]} == 'init' ]] && cmd_net_init
	[[ ${ARGS[1]} == 'del' ]] && cmd_net_del
	[[ ${ARGS[1]} == 'down' ]] && cmd_net_down
	[[ ${ARGS[1]} == 'help' ]] && cmd_net_help
	[[ ${ARGS[1]} == 'list' ]] && cmd_net_list

	# NOT 'up' -> EXIT
	[[ ${ARGS[1]} != 'up' ]] && { echo -e "${RR}ERROR${N}: Unknown command."; cmd_net_help; }

	WT_NAME="$R_WT_NAME"

	[[ -n $IS_NOCREAT ]] && [[ -n $WT_NAME ]] && [[ ! -f "${LID_WGDIR}/wg-${WT_NAME}" ]] && BAIL "EXIT '${WT_NAME}' does not exist."

	if [[ -z $WT_NAME ]] && [[ -f "${LID_WGNAME_FN}" ]]; then
		is_already_up=1
		WT_NAME=$(<"${LID_WGNAME_FN}")
	elif [[ -z $WT_NAME ]] || [[ ! -f "${LID_WGDIR}/wg-${WT_NAME}" ]]; then
		# R_WT_NAME not supplied _or_ R_WT_NAME does not exist => Create new one.
		net_init
		net_init_print_info
	fi

	load_port
	load_wg "${WT_NAME}"

	[[ -n $is_already_up ]] && {
		# HERE: No name supplied. Another WG is already UP. 
		# nsenter.u1000 --setuid 0 --setgid 0 -t "${LG_PID}" -n ip l sh "${WG_DEV}" &>/dev/null && {
		name=$(<"${LID_WGNAME_FN}")
		echo -e "${RR}ERROR${N}: Exit Node ${G}${name}${N} is already UP."
		net_print_example  "${name}"
		net_print_commands "${name}"
		exit 255
	}

	load_config

	# Delete interface in WG namespace (should never happen):
	nsenter -t "${WG_PID}" -n ip link del "${WG_DEV}" 2>/dev/null

	# Delete all interface. Only allow ONE WG interface at a time.
	# WireGuard only supports 1 private key per port number. Sharing the same
	# private key among Exit Nodes wont work either as WG enforces a strict
	# Routing Policy where no two WG interfaces can route 0.0.0.0/0.
	# The only way around is to use different ports (and if we go down this route
	# then it would be easier to implement WireGuard Port Multiplexer simiar to
	# https://github.com/apernet/mwgp but use IPTABLES (NFQUEUE) instaed to make it
	# _far_ more efficient.)
	lgns -t "${LG_PID}" -n ip link delete group 31337 2>/dev/null

	err=$(nsenter -t "${WG_PID}" -n ip link add "${WG_DEV}" type wireguard 2>&1) || BAIL "Failed: ip link add ${WG_DEV} (${err:0:32})." "Failed ${WG_DEV}" ": $err"
	nsenter -t "${WG_PID}" -n ip link set "${WG_DEV}" group 31337 || BAIL "ip link set FAILED."
	echo "$WG_PRIVATE" >"/dev/shm/private.$$"
	err=$(nsenter -t "${WG_PID}" -n wg set "${WG_DEV}" listen-port "${WG_PORT}" private-key "/dev/shm/private.$$" peer "${WT_PUBLIC}" allowed-ips 0.0.0.0/0,::/0 2>&1) || BAIL "Failed: wg set (${err:0:128})"
	rm -f "/dev/shm/private.$$"
	# Move Interface to user's container:
	err=$(nsenter -t "${WG_PID}" -n ip link set "${WG_DEV}" netns "${LG_PID}" 2>&1) || BAIL "Failed to move ${WG_DEV}." "Failed ${WG_DEV} netns ${LG_PID}" ": $err"

	# Configure interface after moving
	lgns -t "${LG_PID}" -n ip -4 address add "${WG_IP}" dev "${WG_DEV}"
	err=$(lgns -t "${LG_PID}" -n ip -6 address add "${WG_IP6}" dev "${WG_DEV}" 2>&1) || echo >&2 "${RR}ERROR${N}: ip -6: $err"
	# This can happen if an sshd-session gets stuck and the namespace for that IP is kept alive
	# lsns -t net | awk '{print $4;}' | anew | while read -r PID; do echo XXX${PID}; nsenter -t "${PID}" -n wg show; done | less
	err=$(lgns -t "${LG_PID}" -n ip link set mtu $((SF_HOST_MTU - 80)) up dev "${WG_DEV}" 2>&1) || BAIL "${err} - port already used? Report to SysCops please (sshd-session stuck?)."

	set_route

	echo "${WT_NAME}" >"${LID_WGNAME_FN}"
	echo "${WT_NAME}" >"${USER_DB_WGNAME_UP_FN}"
	echo "(%F{yellow}EXIT:%B${WT_NAME}%b%F{%(#.blue.green)})" >"${LID_PROMPT_FN}"
	echo -e "${G}SUCCESS${N}"
	net_print_example  "${WT_NAME}"
	net_print_commands "${WT_NAME}"

	exit
}
